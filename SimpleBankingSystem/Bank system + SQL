# Write your code here
from random import sample
import sqlite3


class BankingSystem:
    def __init__(self):
        self.card_data = None
        self.database()

    def menu(self) -> None:
        while True:
            print("1. Create an account\n2. Log into account\n0. Exit")
            choice: str = input()
            if choice == '1':
                self.create_account()
            elif choice == '2':
                self.login()
            elif choice == '0':
                print('Bye!')
                exit()
            else:
                print('Unknown option.')

    @staticmethod
    def database(card=None, pin=None, balance=None) -> None:
        with sqlite3.connect('card.s3db') as data:
            cursor = data.cursor()
            if not card:
                cursor.execute('''
                CREATE TABLE IF NOT EXISTS card (
                id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
                number TEXT NOT NULL UNIQUE,
                pin TEXT NOT NULL,
                balance INTEGER DEFAULT 0 NOT NULL
                );
                ''')
            else:
                cursor.execute('''
                INSERT OR IGNORE INTO card (number, pin, balance)
                VALUES (?, ?, ?);
                ''', (card, pin, balance))

    @staticmethod
    def check_credentials(card) -> tuple:
        with sqlite3.connect('card.s3db') as data:
            cursor = data.cursor()
            cursor.execute('''
            SELECT number, pin, balance FROM card WHERE number LIKE (?);
            ''', (card,))
            return cursor.fetchone()

    @staticmethod
    def luhn_algorithm(card_number: str) -> bool:
        number = [int(i) for i in card_number]
        for x, num in enumerate(number):
            if (x + 1) % 2 == 0:
                continue
            n = num * 2
            number[x] = n if n < 10 else n - 9
        return sum(number) % 10 == 0

    @staticmethod
    def generate_numbers() -> tuple:
        while True:
            random_card = ''.join(['400000'] + [str(n) for n in sample(range(9), 9)] + ['7'])
            random_PIN = ''.join([str(n) for n in sample(range(9), 4)])
            if not BankingSystem.check_credentials(random_card):
                if BankingSystem.luhn_algorithm(random_card):
                    yield random_card, random_PIN
            else:
                continue

    def create_account(self) -> None:
        card, PIN = next(self.generate_numbers())
        self.database(card, PIN, 0)
        print('\nYour card has been created')
        print(f'Your card number:\n{card}')
        print(f'Your card PIN:\n{PIN}\n')

    def login(self) -> None:
        card: str = input('Enter your card number:\n')
        PIN: str = input('Enter your PIN:\n')
        try:
            self.card_data = self.check_credentials(card)
            if self.card_data[1] == PIN:
                print('You have successfully logged in!\n')
                self.account()
            else:
                print('Wrong card number or PIN\n')
        except (KeyError, TypeError):
            print('Wrong card number or PIN\n')

    def account(self) -> None:
        while True:
            print('1. Balance\n2. Log out\n0. Exit')
            choice = input()
            if choice == '1':
                print(f"\nBalance: {self.card_data[2]}\n")
            elif choice == '2':
                self.card_data = None
                print('You have successfully logged out!\n')
                return
            elif choice == '0':
                print('Bye!')
                exit()
            else:
                print('Unknown option.\n')


BankingSystem().menu()


4000009062415784
8709

4000008530196729
2764

4000004302671981
5206

[('4000009062415784', '8709', 0), ('4000009301857267', '2467', 0), ('4000008530196729', '2764', 0), ('4000004302671981', '5206', 777), ('4000008204365717', '0153', 0), ('4000006017245936', '9817', 111)]


[('4000009062415784', '8709', 0), ('4000008530196729', '2764', 0), ('4000004302671981', '5206', 777), ('4000008204365717', '0153', 0), ('4000006017245936', '9817', 111)]

